# -*- mode: org; mode: auto-fill -*-
#+TITLE: Test Page
#+AUTHOR: KDr2

#+BEGIN: inc-file :file "common.inc.org"
#+END:

#+CALL: dynamic-header() :results raw
#+CALL: meta-keywords(kws='("Test" "OrgMode")) :results raw

#+BEGIN: inc-file :file "gad.inc.org"
#+END:

<2014-05-23 Fri>

* About This Page
  This is a test page.
  {{{baidu(野猪拉屎了)}}} {{{google(野猪拉屎了)}}}

* Org Mode Simple Examples                                   :example:simple:
** TODO List                                                       :checkbox:
   <2014-03-24 Mon>
    - [-] check box item 1
      - [ ] sub 1
      - [X] sub 2
      - [ ] http://unicode-table.com/en/
    - [ ] check box item 2
    - [X] check box item 3

** DONE Emphasis and monospace
   CLOSED: [2014-03-24 Mon 19:23]
   You can make words *bold*, /italic/, _underlined_, =code= and
   ~verbatim~, and, if you must, +strike-through+ . Text in the code
   and verbatim string is not processed for Org mode specific syntax,
   it is exported verbatim.

   To turn off fontification for marked up text, you can set
   org-fontify-emphasized-text to nil. To narrow down the list of
   available markup syntax, you can customize org-emphasis-alist. To
   fine tune what characters are allowed before and after the markup
   characters, you can tweak org-emphasis-regexp-components. Beware
   that changing one of the above variables will no take effect until
   you reload Org, for which you may need to restart Emacs.

* Org Mode Complex Examples                                   :example:tag_a:
** Code Block                                                          :code:
   - http://orgmode.org/manual/Header-arguments.html
   - http://orgmode.org/manual/Evaluating-code-blocks.html
*** simple
    #+BEGIN_SRC c
      static inline jl_array_t *_new_array(jl_value_t *atype, uint32_t ndims, size_t *dims)
      {
          int isunboxed=0, elsz=sizeof(void*);
          jl_value_t *el_type = jl_tparam0(atype);
          isunboxed = store_unboxed(el_type);
          if (isunboxed)
              elsz = jl_datatype_size(el_type);
          return _new_array_(atype, ndims, dims, isunboxed, elsz);
      }

      jl_array_t *jl_new_array_for_deserialization(jl_value_t *atype, uint32_t ndims, size_t *dims,
                                                   int isunboxed, int elsz)
      {
          return _new_array_(atype, ndims, dims, isunboxed, elsz);
      }

    #+END_SRC

    #+BEGIN_SRC python :exports results :results value raw
      print("abc")
      return 2**30
    #+END_SRC

*** named block and block call
  #+name: test-0
  #+BEGIN_SRC elisp :exports none
    (princ "OUTPUT-STRING")
    "RETURN-VALUE-STRING"
  #+END_SRC

  the output of test is:
  #+CALL: test-0[:results output]() :results raw

  the return value of test is:
  #+CALL: test-0[:results value]() :results raw

  and this is a inline call
  see call_test-0[:results value]()[:results raw], see the result on
  exported html.

  #+name: t1
  #+BEGIN_SRC elisp :results output raw :exports results
    (gen-table-test) ;; from gen-table.el
  #+END_SRC

  # #+CALL: t1() :results raw

** Table by Code Block                                                :table:
   org-table generated by python code:
   #+BEGIN_SRC python :exports results :results table
     a = (1,2,"string, with, vert | and \\vert comma")
     b = (4,5,6)
     return (a,b)
   #+END_SRC

** LaTeX                                                              :latex:
  latex src
  #+BEGIN_SRC latex :exports both :results value raw replace
    \[ x_{ij}^2\quad \sqrt{x}\quad \sqrt[3]{x} \]
  #+END_SRC

  a raw latex example:

  \[ x_{ij}^2\quad \sqrt{x}\quad \sqrt[3]{x} \]

** Macro Example
#+MACRO: macro-example-1 This is a $1, $2 macro example

{{{macro-example-1(simple, useful)}}}

** Footnote Example
  - An inline footnote[fn::the inline fn content] here;
  - Another footnote[fn:1] here;
  - A named inline footnote[fn:name1:the fn content] here;
  - Another named footnote[fn:name2] here;

[fn:1] the fn content 2, no indent is allowed.
[fn:name2] the fn content name2, no indent is allowed, and this is a
very very very looong footnote, at least longer than one line. what?
still too short? are you kidding me?

* Babel Languages
** Scheme
   #+NAME: scheme-test
   #+BEGIN_SRC scheme :exports results :results value raw :colnames abc
     (display "Hello Scheme in OrgMode") "!!!!"
   #+END_SRC
* Table

  | Col1   | Col2       |
  |--------+------------|
  | quick  | 狐狸跳懒狗 |
  | 狗不理 | fox        |

* Quote
  A quote:
  #+BEGIN_QUOTE
  I've found that I have to have some commands both in '.emacs' and in
  '.gnus', and I use the same code to sign my emails in gnus. I've
  never tried writing an email in org-mode, but if I was I'd tend to
  use a snippet from 'YASnippet', or write my own for it. I've always
  believed in writing emails in gnus, and using org-mode for TODOs,
  documents, etc.
  #+END_QUOTE
* Video
  #+CALL: youtube(id="dVMEkMeXYY8") :results raw

#+BEGIN: inc-file :file "gad.inc.org"
#+END:

* Discuss and Comment
  #+INCLUDE: ../include/disqus.inc.org
