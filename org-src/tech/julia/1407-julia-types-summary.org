# -*- mode: org; mode: auto-fill -*-
#+TITLE: Julia Types Summary
#+AUTHOR: KDr2

# #+OPTIONS: toc:nil
# #+OPTIONS: num:nil

#+BEGIN: inc-file :file "common.inc.org"
#+END:
#+CALL: dynamic-header() :results raw
#+CALL: meta-keywords(kws='("julia" "julia-lang" "type")) :results raw

#+BEGIN: inc-file :file "gad.inc.org"
#+END

* Overview
  This summary is written for *Julia v0.3.x*,  you can read more on
  http://julia.readthedocs.org/en/latest/manual/types/.
* All Types of Julia
  - Declared Types
    - Abstract Type,
      e.g. ~abstract Number~
    - Bits Type
      #+BEGIN_SRC julia
        bitstype «bits» «name»
        bitstype «bits» «name» <: «supertype»
        bitstype 128 Uint128 <: Unsigned
      #+END_SRC
    - Composite Type, e.g.
      #+BEGIN_SRC julia
        type Foo
            bar
            baz::Int
            qux::Float64
        end
      #+END_SRC
    - Imutable Composite Type, e.g.
      #+BEGIN_SRC julia
        immutable Complex
          real::Float64
          imag::Float64
        end
      #+END_SRC
  - Type Union,
      e.g. ~Union(T1, T2)~
  - Type Tuple
    - type of a tuple is a ~Type Tuple~
    - e.g. ~typeof((1, 1.0))~ is ~(Int64, Float64)~
    - ~(Any...,)~ is the same as ~Tuple~
  - Type Aliases
    #+BEGIN_SRC julia
       #typealias DestType SourceType
       typealias Uint Uint64
    #+END_SRC
  - Parametric Types
    - Parametric Abstract Types
  - Meta Types
    - Type
    - DataType, UnionType
    - Type{T} (Singleton Type)
  - Special Types
    - Top: Union type of all types
    - None: Union type of none type (~Union()~)
    - Any: Root spuer type of all declared type(like ~Object~ in Java)
    - Nothing: a type with none field, used for ~NULL~ or ~void~

#+BEGIN: inc-file :file "gad.inc.org"
#+END

* Summary
  Suppose =T, T1, T2 ... Tn= are Declared Types, =t, t1, t2 .. tn= are
  their instances, we can get below ~super~ chains:
   - =Any <- Type <- DataType=
   - =Any <- Type <- UnionType=
   - =Any <- Type{T}=
   - =Any <- Type{UnionType(T1, T2)}=
   - =Any <- T=
   - =Any <- T1=
   - =Any <- T2=
   - =Any <- Tn=

   and ~issubtype~ chains:
   - all reversed ~super~ chains
   - =Type{T} <: DataType=
   - =Type{Union(T1,T2)} <: UnionType=
   - =(T1,T2) <: (Any, Any) <: Tuple=
   - =T1 <: Union(T1, T2) <: Top=

   and ~isa~ chains:
   - if =isa(m, M)= and =M <: N=, then =isa(m, M)=
   - =t isa T isa Type{T}=
   - =t isa T isa DataType=
   - =(t1,t2) isa (T1, T2) isa (Type{T1}, Type{T2})=
   - =(t1,t2) isa (T1, T2) isa (DataType, DataType)=

* Some Demo Code  
  #+BEGIN_SRC julia
    isa(T, DataType)             # => true
    isa(T, Type{T})              # => true 
    issubtype(Type{T}, DataType) # => true
  #+END_SRC

#+BEGIN: inc-file :file "gad.inc.org"
#+END

* Discuss and Comment
  #+BEGIN: inc-file :file "disqus.inc.org"
  #+END:
